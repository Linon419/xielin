version: '3.8'

# 开发环境 Docker Compose 配置 - 使用优化镜像
# 使用方法: docker-compose -f docker-compose.dev.yml up --build

services:
  # 开发环境 - 快速构建和测试
  xielin-dev:
    build:
      context: .
      dockerfile: Dockerfile.minimal  # 使用极简版进行快速开发迭代
    container_name: xielin-app-dev
    environment:
      - NODE_ENV=development
      - PYTHONPATH=/app
      - DEBUG=true
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET=${BINANCE_SECRET}
      - OKEX_API_KEY=${OKEX_API_KEY}
      - OKEX_SECRET=${OKEX_SECRET}
      - OKEX_PASSPHRASE=${OKEX_PASSPHRASE}
      - BYBIT_API_KEY=${BYBIT_API_KEY}
      - BYBIT_SECRET=${BYBIT_SECRET}
    volumes:
      # 开发时挂载源码以便实时修改
      - ./backend-example:/app-src:ro  # 只读挂载避免污染
      - ./data:/app/data
      - ./logs:/var/log/supervisor
    ports:
      - "8080:80"  # 避免与生产环境端口冲突
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s  # 开发环境检查更频繁
      timeout: 5s
      retries: 2
      start_period: 20s
    restart: "no"  # 开发环境不自动重启

volumes:
  xielin-data:
    driver: local
