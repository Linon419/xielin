# 优化版多阶段构建 Dockerfile - 显著减小镜像体积

# 阶段 1: 构建前端 (使用更小的alpine镜像)
FROM node:18-alpine AS frontend-builder
WORKDIR /app

# 只安装必要的构建依赖
RUN apk add --no-cache python3 make g++

# 复制package文件并安装依赖 (使用npm ci 并清理缓存)
COPY package*.json ./
RUN npm ci --only=production --no-audit --no-fund && \
    npm cache clean --force

# 复制源码
COPY public/ public/
COPY src/ src/
COPY tsconfig.json ./

# 设置环境变量并构建
ENV GENERATE_SOURCEMAP=false \
    CI=false \
    NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=2048"

RUN npm run build && \
    rm -rf node_modules src public tsconfig.json package*.json

# 阶段 2: Python后端 (使用alpine)
FROM python:3.11-alpine AS backend

# 安装运行时依赖 (合并为单个RUN减少层数)
RUN apk add --no-cache \
    nginx \
    curl \
    supervisor && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# 设置Python环境变量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    NODE_ENV=production

# 复制requirements文件并安装Python依赖
COPY backend-example/requirements.txt ./
RUN pip install --no-cache-dir --no-compile -r requirements.txt && \
    pip cache purge && \
    rm requirements.txt

# 复制后端代码 (只复制必要文件)
COPY backend-example/*.py ./

# 创建目录结构
RUN mkdir -p /var/www/html /var/log/supervisor /app/data /var/run/nginx && \
    addgroup -g 1001 appuser && \
    adduser -u 1001 -G appuser -s /bin/sh -D appuser

# 从前端构建阶段复制静态文件
COPY --from=frontend-builder /app/build/ /var/www/html/

# 复制配置文件
COPY nginx-combined.conf /etc/nginx/sites-available/default
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# 设置权限
RUN chown -R appuser:appuser /var/www/html /app/data && \
    chmod -R 755 /var/www/html

# 切换到非root用户
USER appuser

# 暴露端口
EXPOSE 80

# 轻量级健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=2 \
    CMD curl -f http://localhost/health || exit 1

# 启动服务
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]