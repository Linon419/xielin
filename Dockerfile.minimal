# 极简版 Dockerfile - 最小化镜像体积

# 阶段 1: 前端构建 (使用最小alpine镜像)
FROM node:18-alpine AS frontend-builder
WORKDIR /app

# 安装依赖并构建 (单层优化)
COPY package*.json ./
RUN npm ci --only=production --no-audit --no-fund --silent && \
    npm cache clean --force

COPY public/ public/
COPY src/ src/
COPY tsconfig.json ./

ENV GENERATE_SOURCEMAP=false NODE_ENV=production CI=false
RUN npm run build && rm -rf node_modules src public tsconfig.json package*.json

# 阶段 2: 运行时镜像 (使用alpine)
FROM python:3.11-alpine AS runtime

# 单个RUN指令安装所有依赖
RUN apk add --no-cache nginx curl && \
    rm -rf /var/cache/apk/* && \
    mkdir -p /var/www/html /app/data /var/run/nginx

WORKDIR /app

# Python环境
ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PYTHONPATH=/app

# 安装Python依赖
COPY backend-example/requirements.txt ./
RUN pip install --no-cache-dir --no-compile -r requirements.txt && \
    pip cache purge && rm requirements.txt

# 复制应用文件 (精确复制避免不必要文件)
COPY backend-example/main.py backend-example/database.py ./
COPY backend-example/routers/ ./routers/

# 复制静态文件
COPY --from=frontend-builder /app/build/ /var/www/html/

# 创建轻量nginx配置
RUN echo 'server { \
    listen 80; \
    root /var/www/html; \
    index index.html; \
    location / { try_files $uri $uri/ /index.html; } \
    location /api { proxy_pass http://127.0.0.1:8000; proxy_set_header Host $host; } \
    location /health { return 200 "OK"; } \
}' > /etc/nginx/http.d/default.conf

# 启动脚本
RUN echo '#!/bin/sh\nnginx -g "daemon off;" & \npython main.py' > /app/start.sh && \
    chmod +x /app/start.sh

EXPOSE 80
HEALTHCHECK --interval=30s --timeout=5s CMD curl -f http://localhost/health || exit 1
CMD ["/app/start.sh"]
