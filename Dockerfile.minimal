# 最小化Dockerfile - 基于成功项目模式
FROM node:18-alpine AS frontend-builder
WORKDIR /app

# 复制并安装前端依赖
COPY package*.json ./
RUN npm install

# 复制源代码并构建
COPY src/ ./src/
COPY public/ ./public/
COPY tsconfig.json ./

# 设置环境变量
ENV GENERATE_SOURCEMAP=false
ENV CI=false

# 构建前端
RUN npm run build

# 生产阶段
FROM python:3.11-slim
WORKDIR /app

# 安装基本依赖
RUN apt-get update && apt-get install -y \
    nginx curl gcc supervisor \
    && rm -rf /var/lib/apt/lists/*

# Python环境
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

# 复制后端代码并安装依赖
COPY backend-example/ ./
RUN pip install --no-cache-dir -r requirements.txt

# 复制前端构建结果
COPY --from=frontend-builder /app/build/ /var/www/html/

# 复制配置文件
COPY nginx-combined.conf /etc/nginx/sites-available/default
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# 创建必要目录
RUN mkdir -p /var/log/supervisor /app/data /var/run/nginx

# 设置权限
RUN chown -R www-data:www-data /var/www/html
RUN chmod -R 755 /var/www/html

# 暴露端口
EXPOSE 80

# 健康检查
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health && curl -f http://localhost/api/health || exit 1

# 启动命令
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
