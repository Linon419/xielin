# 极简版 Dockerfile - 最小化镜像体积

# 阶段 1: 前端构建 (使用最小alpine镜像)
FROM node:18-alpine AS frontend-builder
WORKDIR /app

# 安装依赖并构建 (单层优化)
COPY package*.json ./
RUN npm ci --only=production --no-audit --no-fund --silent && \
    npm cache clean --force

COPY public/ public/
COPY src/ src/
COPY tsconfig.json ./

ENV GENERATE_SOURCEMAP=false NODE_ENV=production CI=false
RUN npm run build && rm -rf node_modules src public tsconfig.json package*.json

# 阶段 2: 运行时镜像 (使用debian-slim以支持预编译wheels)
FROM python:3.11-slim AS runtime

# 安装运行时依赖和nginx
RUN apt-get update && apt-get install -y --no-install-recommends \
    nginx \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /var/www/html /app/data /var/run/nginx

WORKDIR /app

# Python环境
ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PYTHONPATH=/app

# 升级pip并安装Python依赖（使用简化的requirements）
COPY requirements-minimal.txt ./requirements.txt
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    pip cache purge && \
    rm requirements.txt

# 复制应用文件 (使用通配符复制所有Python文件)
COPY backend-example/*.py ./

# 复制静态文件
COPY --from=frontend-builder /app/build/ /var/www/html/

# 创建nginx配置（debian路径）
RUN echo 'server { \
    listen 80; \
    root /var/www/html; \
    index index.html; \
    location / { try_files $uri $uri/ /index.html; } \
    location /api { proxy_pass http://127.0.0.1:8000; proxy_set_header Host $host; } \
    location /health { return 200 "OK"; } \
}' > /etc/nginx/sites-available/default

# 启动脚本
RUN echo '#!/bin/bash\nservice nginx start && python main.py' > /app/start.sh && \
    chmod +x /app/start.sh

EXPOSE 80
HEALTHCHECK --interval=30s --timeout=5s CMD curl -f http://localhost/health || exit 1
CMD ["/app/start.sh"]
