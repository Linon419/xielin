name: Build and Push Optimized Docker Images

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 构建多个优化版本的镜像
  build-matrix:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        variant: [
          { name: "standard", dockerfile: "Dockerfile", suffix: "" },
          { name: "optimized", dockerfile: "Dockerfile.optimized", suffix: "-optimized" },
          { name: "minimal", dockerfile: "Dockerfile.minimal", suffix: "-minimal" }
        ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: 'arm64,amd64'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.12.0

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch,suffix=${{ matrix.variant.suffix }}
          type=ref,event=pr,suffix=${{ matrix.variant.suffix }}
          type=semver,pattern={{version}},suffix=${{ matrix.variant.suffix }}
          type=semver,pattern={{major}}.{{minor}},suffix=${{ matrix.variant.suffix }}
          type=sha,format=short,suffix=${{ matrix.variant.suffix }}
        flavor: |
          latest=${{ matrix.variant.name == 'minimal' && github.ref == 'refs/heads/main' }}

    - name: Build and push Docker image (${{ matrix.variant.name }})
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.variant.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha,scope=${{ matrix.variant.name }}
          type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}:buildcache-${{ matrix.variant.name }}
        cache-to: |
          type=gha,mode=max,scope=${{ matrix.variant.name }}
          type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}:buildcache-${{ matrix.variant.name }},mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # 镜像大小分析和比较
  analyze:
    needs: build-matrix
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull and analyze images
      run: |
        echo "## 📊 Docker镜像体积对比分析" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Pull 所有镜像版本
        docker pull ${{ env.REGISTRY }}/${{ github.repository }}:main || true
        docker pull ${{ env.REGISTRY }}/${{ github.repository }}:main-optimized || true
        docker pull ${{ env.REGISTRY }}/${{ github.repository }}:main-minimal || true
        
        # 获取镜像大小
        echo "| 版本 | 镜像大小 | 优化程度 | 推荐用途 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|----------|----------|----------|" >> $GITHUB_STEP_SUMMARY
        
        # 标准版本
        if docker images ${{ env.REGISTRY }}/${{ github.repository }}:main --format "table {{.Size}}" | tail -1 > /dev/null 2>&1; then
          STANDARD_SIZE=$(docker images ${{ env.REGISTRY }}/${{ github.repository }}:main --format "{{.Size}}" | head -1)
          echo "| 标准版 | $STANDARD_SIZE | 基准 | 完整功能，开发环境 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 优化版本
        if docker images ${{ env.REGISTRY }}/${{ github.repository }}:main-optimized --format "table {{.Size}}" | tail -1 > /dev/null 2>&1; then
          OPTIMIZED_SIZE=$(docker images ${{ env.REGISTRY }}/${{ github.repository }}:main-optimized --format "{{.Size}}" | head -1)
          echo "| 优化版 | $OPTIMIZED_SIZE | 🟢 优化 | 生产环境，平衡性能 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 极简版本
        if docker images ${{ env.REGISTRY }}/${{ github.repository }}:main-minimal --format "table {{.Size}}" | tail -1 > /dev/null 2>&1; then
          MINIMAL_SIZE=$(docker images ${{ env.REGISTRY }}/${{ github.repository }}:main-minimal --format "{{.Size}}" | head -1)
          echo "| 极简版 | $MINIMAL_SIZE | 🟢🟢 最优 | 资源受限环境 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 部署命令" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**极简版（推荐）：**" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ github.repository }}:latest  # 自动使用minimal版本" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**优化版：**" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ github.repository }}:main-optimized" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  # 自动部署到服务器
  deploy:
    needs: [build-matrix, analyze]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy notification
      run: |
        echo "## 🚀 部署就绪!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 可用镜像版本:" >> $GITHUB_STEP_SUMMARY
        echo "- **极简版(推荐):** \`${{ env.REGISTRY }}/${{ github.repository }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- **优化版:** \`${{ env.REGISTRY }}/${{ github.repository }}:main-optimized\`" >> $GITHUB_STEP_SUMMARY
        echo "- **标准版:** \`${{ env.REGISTRY }}/${{ github.repository }}:main\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Docker Compose 部署:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker-compose pull && docker-compose up -d" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
