# 宽松构建版本 - 跳过严格检查
FROM node:18-alpine AS frontend-builder
WORKDIR /app

# 增加内存限制
ENV NODE_OPTIONS="--max-old-space-size=4096"

# 复制package文件
COPY package*.json ./

# 安装依赖
RUN npm ci

# 复制所有文件
COPY . .

# 设置宽松的构建环境变量
ENV GENERATE_SOURCEMAP=false
ENV CI=false
ENV NODE_ENV=production
ENV SKIP_PREFLIGHT_CHECK=true
ENV ESLINT_NO_DEV_ERRORS=true
ENV TSC_COMPILE_ON_ERROR=true
ENV REACT_APP_SKIP_PREFLIGHT_CHECK=true

# 创建宽松的.env文件
RUN echo "SKIP_PREFLIGHT_CHECK=true" > .env
RUN echo "ESLINT_NO_DEV_ERRORS=true" >> .env
RUN echo "TSC_COMPILE_ON_ERROR=true" >> .env

# 尝试构建（忽略警告和非致命错误）
RUN npm run build --silent || npm run build --force || (echo "尝试降级构建..." && npm run build --legacy-peer-deps)

# 生产阶段
FROM python:3.11-slim
WORKDIR /app

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    nginx curl gcc supervisor \
    && rm -rf /var/lib/apt/lists/*

# Python环境
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

# 复制后端代码
COPY backend-example/ ./
RUN pip install --no-cache-dir -r requirements.txt

# 复制前端构建结果
COPY --from=frontend-builder /app/build/ /var/www/html/

# 复制配置
COPY nginx-combined.conf /etc/nginx/sites-available/default
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# 设置目录和权限
RUN mkdir -p /var/log/supervisor /app/data /var/run/nginx && \
    chown -R www-data:www-data /var/www/html && \
    chmod -R 755 /var/www/html

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health && curl -f http://localhost/api/health || exit 1

CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
